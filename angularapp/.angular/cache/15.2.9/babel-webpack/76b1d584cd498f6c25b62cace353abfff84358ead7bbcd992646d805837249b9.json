{"ast":null,"code":"import { catchError, map } from \"rxjs/operators\";\nimport { NotificationType } from \"../Notifications/NotificationType\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../helper/helper.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../Notifications/Notifications.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(helper, router, notificationService) {\n      this.helper = helper;\n      this.router = router;\n      this.notificationService = notificationService;\n    }\n    intercept(req, next) {\n      if (sessionStorage.getItem('token') || this.helper.getCookie('token')) {\n        const clonedReq = req.clone({\n          headers: req.headers.set('Authorization', 'Bearer ' + sessionStorage.getItem('token'))\n        });\n        return next.handle(clonedReq).pipe(catchError(err => {\n          if (err.status == 419) {\n            sessionStorage.removeItem('token');\n            this.router.navigateByUrl('/login');\n          } else if (err.status == 401) {\n            this.notificationService.ShowNotification(NotificationType.Error, \"You Are Not Authorized\");\n          }\n          return err;\n        })).pipe(map(evt => {\n          return evt;\n        }));\n      } else {\n        return next.handle(req).pipe(catchError(err => {\n          if (err.status == 419) {\n            this.notificationService.ShowNotification(NotificationType.Error, \"Session Timeout\");\n            sessionStorage.removeItem('token');\n            this.router.navigateByUrl('/login');\n          } else if (err.status == 401) {\n            this.notificationService.ShowNotification(NotificationType.Error, \"You Are Not Authorized\");\n          }\n          return err;\n        })).pipe(map(evt => {\n          return evt;\n        }));\n      }\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.HelperService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationsService));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}