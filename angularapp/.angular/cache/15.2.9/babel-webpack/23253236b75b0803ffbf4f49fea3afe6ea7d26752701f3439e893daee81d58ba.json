{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { NotificationType } from './NotificationType';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport let NotificationsService = /*#__PURE__*/(() => {\n  class NotificationsService {\n    constructor(router, _toastr) {\n      this.router = router;\n      this._toastr = _toastr;\n      this.subject = new BehaviorSubject([]);\n      this.keepAfterRouteChange = true;\n      // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\n      router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          if (this.keepAfterRouteChange) {\n            // only keep for a single route change\n            this.keepAfterRouteChange = false;\n          } else {\n            // clear alert messages\n            this.clear();\n          }\n        }\n      });\n    }\n    //this services is used for show notifiaction using toastr services\n    //show dialog when you want to delete item to confirm before delete\n    ShowNotification(_NotificationType, message) {\n      debugger;\n      switch (_NotificationType) {\n        case NotificationType.Success:\n          this.success(message);\n          break;\n        case NotificationType.Error:\n          this.error(message);\n          break;\n        case NotificationType.Info:\n          this.info(message);\n          break;\n      }\n    }\n    getAlert() {\n      return this.subject.asObservable();\n    }\n    //start alertjs function\n    success(message) {\n      debugger;\n      this._toastr.success(message, '', {\n        positionClass: 'toast-top-right'\n      });\n    }\n    error(message) {\n      this._toastr.error(message, '', {\n        positionClass: 'toast-top-right'\n      });\n    }\n    info(message) {\n      this._toastr.info(message, '', {\n        positionClass: 'toast-top-right'\n      });\n    }\n    //end alertjs function\n    clear() {\n      this.subject.next([]);\n    }\n  }\n  NotificationsService.ɵfac = function NotificationsService_Factory(t) {\n    return new (t || NotificationsService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n  NotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsService,\n    factory: NotificationsService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}