{"ast":null,"code":"import { ApplicationUser } from './Models/application-user.model';\nimport { NotificationType } from '../Notifications/NotificationType';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../Notifications/Notifications.service\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, route, router, notificationService) {\n      this.http = http;\n      this.route = route;\n      this.router = router;\n      this.notificationService = notificationService;\n      this.ApplicationUser = new ApplicationUser();\n      this.urlAddress = '/Authentication/';\n    }\n    GetUserData(UserName, Password) {\n      debugger;\n      return this.http.get(this.urlAddress + 'GetUserData/' + UserName + \"/\" + Password).subscribe(res => {\n        this.ApplicationUser = res;\n        let obj = {\n          UserName: this.ApplicationUser.UserName\n        };\n        if (!this.ApplicationUser.IsAuthenticated) {\n          this.notificationService.ShowNotification(NotificationType.Error, \"Username Or Password is Wrong\");\n          return;\n        }\n        sessionStorage.setItem(\"userData\", JSON.stringify(obj));\n        sessionStorage.setItem(\"token\", this.ApplicationUser.Token);\n        if (this.ApplicationUser.UserName !== undefined) {\n          this.router.navigate(['/']);\n          return true;\n        } else {\n          this.router.navigate(['/login']);\n          return true;\n        }\n      });\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationsService));\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}